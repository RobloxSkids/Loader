loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua"))()

--// Luarmor \\ --

-- // JumpScare \\ --

if getgenv().FlowingAway["Start Up"].JumpScare then
    local function playIntro()
        local xVbYwNl = Instance.new("ScreenGui")
        local FdLmTjQ = Instance.new("Frame")
        local YzPbEkA = Instance.new("ImageLabel")
        local RkVsJqU = Instance.new("Sound")
        local motionBlur = Instance.new("BlurEffect")

        xVbYwNl.Name = "IntroScreen"
        xVbYwNl.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

        FdLmTjQ.Name = "IntroFrame"
        FdLmTjQ.Parent = xVbYwNl
        FdLmTjQ.Size = UDim2.new(1, 0, 1, 0)
        FdLmTjQ.BackgroundTransparency = 1

        YzPbEkA.Name = "IntroImage"
        YzPbEkA.Parent = FdLmTjQ
        YzPbEkA.Size = UDim2.new(0.4, 0, 0.4, 0)
        YzPbEkA.Position = UDim2.new(0.3, 0, 0.3, 0)
        YzPbEkA.Image = "rbxassetid://116195769696128"
        YzPbEkA.BackgroundTransparency = 1
        YzPbEkA.ImageTransparency = 0.5  

        RkVsJqU.Name = "IntroSound"
        RkVsJqU.Parent = FdLmTjQ
        RkVsJqU.SoundId = "rbxassetid://6580172940"
        RkVsJqU.Volume = 10
        RkVsJqU:Play()

        motionBlur.Parent = game.Lighting
        motionBlur.Size = 24

        YzPbEkA.ImageTransparency = 1
        local HmQpCrK = game:GetService("TweenService")
        local DcAbLyT = TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 1)

        local EiGtWjF = HmQpCrK:Create(YzPbEkA, DcAbLyT, {ImageTransparency = 0.5})
        local UvQhZwE = HmQpCrK:Create(YzPbEkA, DcAbLyT, {ImageTransparency = 1})

        EiGtWjF:Play()
        EiGtWjF.Completed:Wait()

        wait(2)

        UvQhZwE:Play()

        local blurTweenInfo = TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local blurTween = HmQpCrK:Create(motionBlur, blurTweenInfo, {Size = 0})

        blurTween:Play()
        blurTween.Completed:Wait()

        motionBlur:Destroy()
        UvQhZwE.Completed:Wait()

        xVbYwNl:Destroy()
    end

    playIntro()
end

-- // Variables And Keys \\ -- 

local Cam = workspace.CurrentCamera

local VirtualInputManager = game:GetService("VirtualInputManager")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local function glitchsppeed()
    local settings = getgenv().FlowingAway.Macro
    local interval = settings.Speed

    if settings.Keybind then
        local function onMacroInput(input, processed)
            if processed then return end

            if input.KeyCode == Enum.KeyCode[settings.Keybind] then
                settings.Enabled = not settings.Enabled

                if settings.Enabled then
                    if settings.Mode == "FirstPerson" then
                        local nextActionTime = tick() + interval

                        repeat
                            if tick() >= nextActionTime then
                                VirtualInputManager:SendMouseWheelEvent(0, 0, true, game)
                                runService.Heartbeat:Wait()
                                VirtualInputManager:SendMouseWheelEvent(0, 0, false, game)
                                nextActionTime = tick() + interval
                            end
                            runService.Heartbeat:Wait()
                        until not settings.Enabled

                    elseif settings.Mode == "ThirdPerson" then
                        local actionInterval = interval / 4
                        local nextActionTime = tick() + actionInterval

                        repeat
                            if tick() >= nextActionTime then
                                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.I, false, game)
                                nextActionTime = tick() + actionInterval
                            end
                            runService.Heartbeat:Wait()

                            if tick() >= nextActionTime then
                                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.O, false, game)
                                nextActionTime = tick() + actionInterval
                            end
                            runService.Heartbeat:Wait()

                            if tick() >= nextActionTime then
                                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.I, false, game)
                                nextActionTime = tick() + actionInterval
                            end
                            runService.Heartbeat:Wait()

                            if tick() >= nextActionTime then
                                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.O, false, game)
                                nextActionTime = tick() + actionInterval
                            end
                            runService.Heartbeat:Wait()

                        until not settings.Enabled
                    end
                end
            end
        end
        userInputService.InputBegan:Connect(onMacroInput)
    end
end

glitchsppeed()

local keybind = getgenv().FlowingAway.TargetAim.Keybind
local Enabled = getgenv().FlowingAway.TargetAim.Enabled
local Prediction = getgenv().FlowingAway.TargetAim.Prediction
local Notifications = getgenv().FlowingAway.TargetAim.Notifications
local AimPart = getgenv().FlowingAway.TargetAim.HitPart

local Tool = Instance.new("Tool")
Tool.RequiresHandle = false
Tool.Name = "Lock Tool"

local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = game.Players.LocalPlayer:GetMouse()
local Plr
local TargetPlayer

local Part = Instance.new("Part")
Part.Anchored = true
Part.CanCollide = false
Part.Color = Color3.fromRGB(255,0,0)
Part.Material = Enum.Material.Neon
Part.Size = Vector3.new(0.93, 0.93, 0.93)
Part.Shape = Enum.PartType.Block

local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local player = game.Players.LocalPlayer
local fovRadius = 60
local Mouse = player:GetMouse()

function Dick()
    local closestPlayer
    local shortestDistance = math.huge
    
    for _, v in pairs(game.Players:GetPlayers()) do
        if v ~= player and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and
            v.Character:FindFirstChild("HumanoidRootPart") then

            local characterPosition = v.Character.HumanoidRootPart.Position
            local viewportPosition, onScreen = Camera:WorldToViewportPoint(characterPosition)

            if onScreen then
                local distance = (Vector2.new(viewportPosition.X, viewportPosition.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude

                if distance < shortestDistance then
                    closestPlayer = v
                    shortestDistance = distance
                end
            end
        end
    end
    
    return closestPlayer
end

local cframeSettings = getgenv().FlowingAway.cframe

local localPlayer = game.Players.LocalPlayer

if cframeSettings.Enabled then
    repeat
        wait()
    until game:IsLoaded()
    repeat
        wait()
    until localPlayer.Character

    local userInputService = game:GetService('UserInputService')
    local runService = game:GetService('RunService')
    local multiplier = 0.5
    local enabled = true

    local function onInputBegan(input)
        if input.KeyCode == Enum.KeyCode.LeftBracket then
            multiplier = multiplier + 0.01
            wait(0.2)
            while userInputService:IsKeyDown(Enum.KeyCode.LeftBracket) do
                wait()
                multiplier = multiplier + 0.01
            end
        end
        if input.KeyCode == Enum.KeyCode.RightBracket then
            multiplier = multiplier - 0.01
            wait(0.2)
            while userInputService:IsKeyDown(Enum.KeyCode.RightBracket) do
                wait()
                multiplier = multiplier - 0.01
            end
        end
        if input.KeyCode == Enum.KeyCode[cframeSettings.key] then
            enabled = not enabled
            if enabled then
                repeat
                    localCharacter = localPlayer.Character
                    local humanoidRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.CFrame = humanoidRootPart.CFrame + localPlayer.Character.Humanoid.MoveDirection * cframeSettings.Speed
                    end
                    runService.Stepped:wait()
                until not enabled
            end
        end
    end

    userInputService.InputBegan:Connect(onInputBegan)
end

function PhoneNiggers()
    local closestPlayer
    local shortestDistance = math.huge
    
    for _, v in pairs(game.Players:GetPlayers()) do
        if v ~= player and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and
            v.Character:FindFirstChild("HumanoidRootPart") then

            local buhhalss = v.Character.HumanoidRootPart.Position
            local viewportPosition, onScreen = Camera:WorldToViewportPoint(buhhalss)

            if onScreen then
                local distance = (Vector2.new(viewportPosition.X, viewportPosition.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).magnitude

                if distance < shortestDistance and distance <= fovRadius then
                    closestPlayer = v
                    shortestDistance = distance
                end
            end
        end
    end
    
    return closestPlayer
end


Mouse.KeyDown:Connect(function(key)
local yuhkey = Enum.KeyCode[getgenv().FlowingAway.TargetAim.Keybind]
    if Enum.KeyCode[key:upper()] == yuhkey then
        if Enabled then
            Enabled = false
            if Notifications then
                Plr = Dick()
                TargetPlayer = tostring(Plr)
                game.StarterGui:SetCore("SendNotification", {
                    Title = "FlowingAway",
                    Text = ""
                })
            end
        else
            Plr = Dick()
            TargetPlayer = tostring(Plr)
            Enabled = true
            if Notifications then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "FlowingAway",
                    Text = "Target: " .. tostring(TargetPlayer)
                })
            end
        end
    end
end)

Tool.Activated:Connect(
    function()
        if Enabled then
            Enabled = false
            if Notifications then
                Plr = PhoneNiggers()
                TargetPlayer = tostring(Plr)
                game.StarterGui:SetCore(
                    "SendNotification",
                    {
                        Title = "FlowingAway",
                        Text = ""
                    }
                )
            end
        else
            Plr = PhoneNiggers()
            TargetPlayer = tostring(Plr)
            Enabled = true
            if Notifications then
                game.StarterGui:SetCore(
                    "SendNotification",
                    {
                        Title = "FlowingAway",
                        Text = "" .. tostring(TargetPlayer)
                    }
                )
            end
        end
    end
)

local CamENABLED = getgenv().FlowingAway["Camera Navigation"].Enabled
local horizontalsmooth = getgenv().FlowingAway["Camera Navigation"].Smoothness
local AirPart = getgenv().FlowingAway.TargetAim.AirPart
local ShakeX = getgenv().FlowingAway["Camera Navigation"].ShakeValue
local TweenService = game:GetService("TweenService")
local SkibidiAmount = getgenv().FlowingAway["Camera Navigation"].Prediction

game:GetService("RunService").RenderStepped:Connect(function()
    if Enabled and TargetPlayer then
        local SkibidiFarts = game.Players:FindFirstChild(TargetPlayer) and game.Players[TargetPlayer].Character
        if SkibidiFarts then
            local humanoidRootPart = SkibidiFarts:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local aimPart = AimPart
                local CamPart = getgenv().FlowingAway["Camera Navigation"].HitPart

                if SkibidiFarts:FindFirstChild(aimPart) then
                    Part.Position = SkibidiFarts[aimPart].Position

                    
                    local VelocityDanceHipHockHipFock = humanoidRootPart.Velocity
                    local BigHero6 = SkibidiFarts[CamPart].Position + (VelocityDanceHipHockHipFock * SkibidiAmount)

                    if CamENABLED then
                        
                        local BigHero7 = CFrame.new(Camera.CFrame.Position, BigHero6)
                        local tweenInfo = TweenInfo.new(horizontalsmooth, Enum.EasingStyle[getgenv().FlowingAway["Camera Navigation"].Style], Enum.EasingDirection[getgenv().FlowingAway["Camera Navigation"].Direction])
                        local tween = TweenService:Create(Camera, tweenInfo, {CFrame = BigHero7})
                        tween:Play()

                        
                        Camera.CFrame =
                            Camera.CFrame *
                            CFrame.Angles(math.random(-ShakeX, ShakeX) * 0.01, math.random(-ShakeX, ShakeX) * 0.01, 0)
                    end
                else
                    Enabled = false
                    Part.CFrame = CFrame.new(0, -9999, 0)
                end
            end
        else
            Part.CFrame = CFrame.new(0, -9999, 0)
        end
    else
        Part.CFrame = CFrame.new(0, -9999, 0)
    end
end)
       

local function WallCheck(destination, ignore)
    if not getgenv().FlowingAway.Checks.Wall then
        return true
    end
    local origin = Cam.CFrame.p
    local direction = destination - origin
    local ray = Ray.new(origin, direction)
    local hit = workspace:FindPartOnRayWithIgnoreList(ray, ignore)
    return hit == nil
end

 if getgenv().FlowingAway["Start Up"].Solara then
local Client = game.Players.LocalPlayer

local function ConnectWithMyDICK(tool)
    if tool:IsA("Tool") then
        tool.Activated:Connect(function()
            local vap = {"UpdateMousePos", "GetMousePos", "MousePos", "MOUSE", "MousePosUpdate", "UpdateMousePosI", "MOUSE"}

            if Enabled and TargetPlayer then
                local TargetCharacter = game.Players[TargetPlayer].Character
                local TargetPart = TargetCharacter[AimPart]

                if TargetPart then
                    local Position = TargetPart.Position + (TargetPart.Velocity * Prediction)

                    for _, remote in pairs(vap) do
                        game.ReplicatedStorage.MainEvent:FireServer(remote, Position)
                    end
                end
            end
        end)
    end
end

local function repeatoffender()
    for _, tool in pairs(Client.Backpack:GetChildren()) do
        ConnectWithMyDICK(tool)
    end

    Client.Character.ChildAdded:Connect(function(tool)
        ConnectWithMyDICK(tool)
    end)
end

local function catchapedoin24()
    Client.CharacterAdded:Connect(function()
        task.wait(1)
        repeatoffender()
    end)
end

repeatoffender()
catchapedoin24()
end

if getgenv().FlowingAway["Start Up"].Solara == false then
    local mt = getrawmetatable(game)
    local old = mt.__namecall
    setreadonly(mt, false)
    
    mt.__namecall =
        newcclosure(
        function(...)
            local args = {...}
            local vap = {"UpdateMousePos", "GetMousePos", "MousePos", "MOUSE", "MousePosUpdate", "UpdateMousePosI", "MOUSE"}
    
            if Enabled and getnamecallmethod() == "FireServer" and table.find(vap, args[2]) then
                args[3] =
                    game.Players[TargetPlayer].Character[AimPart].Position +
                    (game.Players[TargetPlayer].Character[AimPart].Velocity * Prediction)
                return old(unpack(args))
            end
    
            return old(...)
        end
    )
end

if getgenv().FlowingAway.Spin.Enabled == true then
    
    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local RunService = game:GetService("RunService")
    local Camera = workspace.CurrentCamera
    local Toggle = getgenv().FlowingAway.Spin.Enabled
    local RotationSpeed = getgenv().FlowingAway.Spin.Speed
    local Keybind = Enum.KeyCode[getgenv().FlowingAway.Spin.Keybind]
    
    local function OnKeyPress(Input, GameProcessedEvent)
        if Input.KeyCode == Keybind and not GameProcessedEvent then 
            Toggle = not Toggle
        end
    end
    
    UserInputService.InputBegan:Connect(OnKeyPress)
    
    local LastRenderTime = 0
    local TotalRotation = 0
    
    local function RotateCamera()
        if Toggle then
            local CurrentTime = tick()
            local TimeDelta = math.min(CurrentTime - LastRenderTime, 0.01)
            LastRenderTime = CurrentTime
    
            local RotationAngle = RotationSpeed * TimeDelta
            local Rotation = CFrame.fromAxisAngle(Vector3.new(0, 1, 0), math.rad(RotationAngle))
            Camera.CFrame = Camera.CFrame * Rotation
    
            TotalRotation = TotalRotation + RotationAngle
            if TotalRotation >= getgenv().FlowingAway.Spin.Degrees then 
                Toggle = false
                TotalRotation = 0
            end
        end
    end
    
    RunService.RenderStepped:Connect(RotateCamera)
    end

local huii = Instance.new("ScreenGui")
local TextButton = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local ImageLabel = Instance.new("ImageLabel")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")
local Camera = game.Workspace.CurrentCamera  -- Ensure Camera is defined
local RunService = game:GetService("RunService")

-- Properties:

huii.Parent = nil
huii.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

TextButton.Parent = huii
TextButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BackgroundTransparency = 0.4
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.681249976, 0, 0.294444442, 0)
TextButton.Size = UDim2.new(0, 90, 0, 30)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = "Spin"
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextSize = 25
TextButton.TextXAlignment = Enum.TextXAlignment.Right

UICorner.CornerRadius = UDim.new(0, 6)
UICorner.Parent = TextButton

ImageLabel.Parent = TextButton
ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel.BackgroundTransparency = 1.000
ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
ImageLabel.BorderSizePixel = 0
ImageLabel.Position = UDim2.new(-0.00296074059, 0, 0.00555547094, 0)
ImageLabel.Size = UDim2.new(0, 29, 0, 30)
ImageLabel.Image = "http://www.roblox.com/asset/?id=111095683894090"
ImageLabel.ImageColor3 = Color3.fromRGB(0, 0, 0)

-- Initialize variables
local Toggle = false
local LastRenderTime = tick()
local TotalRotation = 0

local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    TextButton.Position =
        UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

local function RotateCamera()
    if Toggle then
        local CurrentTime = tick()
        local TimeDelta = math.min(CurrentTime - LastRenderTime, 0.01)
        LastRenderTime = CurrentTime

        local RotationAngle = getgenv().FlowingAway.Spin.Speed * TimeDelta
        local Rotation = CFrame.fromAxisAngle(Vector3.new(0, 1, 0), math.rad(RotationAngle))
        Camera.CFrame = Camera.CFrame * Rotation

        TotalRotation = TotalRotation + RotationAngle
        if TotalRotation >= 360 then  -- Rotate 360 degrees
            Toggle = false
            TotalRotation = 0
        end
    end
end

RunService.RenderStepped:Connect(RotateCamera)

TextButton.InputBegan:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = TextButton.Position

            input.Changed:Connect(
                function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end
            )
        end
    end
)

TextButton.InputChanged:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end
)

UserInputService.InputChanged:Connect(
    function(input)
        if dragging and input == dragInput then
            update(input)
        end
    end
)

TextButton.MouseButton1Click:Connect(
    function()
        Toggle = not Toggle
        if Toggle then
            LastRenderTime = tick()  -- Reset time when starting rotation
        end
    end
)

local yo = Instance.new("ScreenGui")
local TextButton = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local ImageLabel = Instance.new("ImageLabel")
local StarterGui = game:GetService("StarterGui")

-- Properties:

yo.Parent = nil
yo.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

TextButton.Parent = yo
TextButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BackgroundTransparency = 0.4
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.681249976, 0, 0.294444442, 0)
TextButton.Size = UDim2.new(0, 90, 0, 30)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = "Macro"
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextSize = 25
TextButton.TextXAlignment = Enum.TextXAlignment.Right

UICorner.CornerRadius = UDim.new(0, 6)
UICorner.Parent = TextButton

ImageLabel.Parent = TextButton
ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel.BackgroundTransparency = 1.000
ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
ImageLabel.BorderSizePixel = 0
ImageLabel.Position = UDim2.new(-0.00296074059, 0, 0.00555547094, 0)
ImageLabel.Size = UDim2.new(0, 29, 0, 30)
ImageLabel.Image = "http://www.roblox.com/asset/?id=111095683894090"
ImageLabel.ImageColor3 = Color3.fromRGB(0, 0, 0)

-- Make the button draggable on mobile:

local UserInputService = game:GetService("UserInputService")

local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    TextButton.Position =
        UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

TextButton.InputBegan:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = TextButton.Position

            input.Changed:Connect(
                function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end
            )
        end
    end
)

TextButton.InputChanged:Connect(
    function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end
)

UserInputService.InputChanged:Connect(
    function(input)
        if dragging and input == dragInput then
            update(input)
        end
    end
)

local toggled = false
local function diddyparty223()
    local dicks = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not dicks then
        return
    end

    RunService.RenderStepped:Connect(
        function()
            if toggled then
                local camera = workspace.CurrentCamera
                local cameraLook = camera.CFrame.LookVector
                dicks.CFrame = CFrame.new(dicks.Position, dicks.Position + Vector3.new(cameraLook.X, 0, cameraLook.Z))
            end
        end
    )
end

TextButton.MouseButton1Click:Connect(
    function()
        toggled = not toggled
        diddyparty223()
    end
)

player.CharacterAdded:Connect(
    function()
        diddyparty223()
    end
)

local UserInputService = game:GetService("UserInputService")
local tappsy = false

local function detect()
    local platform = UserInputService:GetPlatform()

    UserInputService.InputBegan:Connect(function(input)
        if (platform == Enum.Platform.Android or platform == Enum.Platform.IOS) and not tappsy then
            tappsy = true
            print("on mobile device")

            if getgenv().FlowingAway.Macro and getgenv().FlowingAway.Macro.Enabled then
                    yo.Parent = game:GetService("CoreGui")
            end

            if getgenv().FlowingAway.Spin and getgenv().FlowingAway.Spin.Enabled then
                    huii.Parent = game:GetService("CoreGui")
            end

            Tool.Parent = game.Players.LocalPlayer.Backpack

            game.Players.LocalPlayer.CharacterAdded:Connect(function()
                    Tool.Parent = game.Players.LocalPlayer.Backpack
            end)
        end
    end)
end

detect()

getgenv().Loaded = false 

wait(0.9)

getgenv().Loaded = true

if getgenv().Loaded == true then 
  print("Loaded Successfully")
end
